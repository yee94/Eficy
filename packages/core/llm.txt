# Eficy Core V3 - LLM 文档

## 项目概述

Eficy Core V3 是一个现代化的前端编排框架，采用全新的技术栈和架构设计，实现高性能、可扩展的 JSON 驱动组件渲染。

### 核心特性
- 🔄 基于 @eficy/reactive 的现代化响应式系统，替代 MobX
- 💉 使用 tsyringe 依赖注入容器，实现松耦合架构
- ⚡ 独立节点渲染，每个 `#view` 节点使用 React.memo 完全隔绝父层 rerender
- 🎯 支持任意 React 组件库，无强依赖
- 🔧 基于装饰器的生命周期插件系统
- 📦 TypeScript 原生支持，完整类型定义
- 🏗️ 面向对象设计，易于扩展和维护
- 🚀 由内向外渲染策略，提升性能

### 技术栈
- React 18+
- TypeScript
- @eficy/reactive (基于 @preact/signals-core)
- @eficy/reactive-react (React 集成)
- tsyringe (依赖注入)
- lodash (工具库)
- nanoid (ID 生成)
- reflect-metadata (装饰器支持)

## 核心架构

### 1. 主要类和服务

#### Eficy (核心类)
```typescript
class Eficy {
  // 配置方法
  config(options: IEficyConfig): this
  extend(options: IExtendOptions): this
  
  // 渲染方法
  async createElement(schema: IEficySchema): Promise<ReactElement | null>
  async render(schema: IEficySchema, container: string | HTMLElement): Promise<void>
  
  // 节点操作方法
  getNodeTree(schema: IEficySchema): EficyModelTree
  findNode(nodeId: string): EficyNode | null
  updateNode(nodeId: string, data: any): void
  addChild(parentId: string, childData: any): EficyNode | null
  removeChild(parentId: string, childId: string): void
  
  // 插件管理
  registerPlugin(plugin: ILifecyclePlugin): void
  unregisterPlugin(pluginName: string): void
  
  // 统计信息
  get stats(): object
}
```

#### EficyNode (数据模型)
```typescript
class EficyNode extends ObservableClass {
  // 核心字段
  @Observable public '#': string              // 节点ID
  @Observable public '#view': string          // 组件名称
  @Observable public '#children': EficyNode[] // 子节点
  @Observable public '#content'?: string | ReactElement // 内容
  @Observable public '#if'?: boolean | (() => boolean)   // 条件渲染
  @Observable public '#show'?: boolean | (() => boolean) // 显示/隐藏
  @Observable public '#style'?: Record<string, any>      // 样式
  @Observable public '#class'?: string | string[]        // CSS类名
  @Observable public '#events'?: Record<string, any>     // 事件处理器
  
  // 计算属性
  @Computed get props(): Record<string, any>
  @Computed get shouldRender(): boolean
  @Computed get viewDataMap(): Record<string, EficyNode>
  
  // 操作方法
  @Action updateField(key: string, value: any): void
  @Action addChild(child: EficyNode): void
  @Action removeChild(childId: string): void
  @Action update(data: IViewData): void
  @Action overwrite(data: IViewData): void
  
  // 工具方法
  findChild(childId: string): EficyNode | null
  toJSON(): IViewData
  static fromJSON(data: IViewData): EficyNode
}
```

#### EficyModelTree (节点存储)
```typescript
@injectable()
class EficyModelTree {
  @Observable private rootNode: EficyNode
  
  @Computed get nodeMap(): Record<string, EficyNode>
  @Computed get root(): EficyNode | null
  @Computed get nodes(): Record<string, EficyNode>
  @Computed get stats(): object
  
  @Action build(views: IViewData | IViewData[]): void
  findNode(nodeId: string): EficyNode | null
  @Action updateNode(nodeId: string, data: Partial<IViewData>): void
  @Action addChild(parentId: string, childData: IViewData): EficyNode | null
  @Action removeChild(parentId: string, childId: string): void
  @Action clear(): void
  
  toJSON(): IViewData | null
  static fromJSON(data: IViewData | IViewData[], pluginManager: PluginManager): EficyModelTree
}
```

#### DomTree (渲染树)
```typescript
@injectable()
class DomTree {
  async createElement(eficyNode: EficyNode): Promise<void>
  findRenderNode(nodeId: string): ReactElement | null
  updateRenderNode(nodeId: string, eficyNode: EficyNode): void
  addRenderNode(eficyNode: EficyNode): void
  removeRenderNode(nodeId: string): void
  clear(): void
  get stats(): object
}
```

### 2. 服务层

#### ConfigService
```typescript
@injectable()
class ConfigService {
  get<T = any>(key: string): T
  set(key: string, value: any): void
  extend(options: IExtendOptions): void
  getConfig(): IEficyConfig
}
```

#### ComponentRegistry
```typescript
@injectable()
class ComponentRegistry implements IComponentRegistry {
  register(name: string, component: ComponentType<any> | string): void
  unregister(name: string): void
  get(name: string): ComponentType<any> | string | null
  getAll(): Record<string, ComponentType<any> | string>
  extend(componentMap: Record<string, ComponentType<any> | string>): void
}
```

#### PluginManager
```typescript
@injectable()
class PluginManager {
  register(plugin: ILifecyclePlugin): void
  unregister(pluginName: string): void
  async executeHook<T>(hookType: HookType, data: any, context: any, next: () => Promise<T>): Promise<T>
  getHookStats(): object
}
```

#### LifecycleEventEmitter
```typescript
@injectable()
class LifecycleEventEmitter {
  emit(event: string, data: any): void
  on(event: string, handler: Function): void
  off(event: string, handler: Function): void
  getStatistics(): object
}
```

## Schema 格式

### 基础 Schema 结构
```typescript
interface IViewData {
  '#'?: string                           // 节点ID
  '#view'?: string                       // 组件名称，默认 'div'
  '#children'?: IViewData[]              // 子节点
  '#content'?: string | ReactElement     // 文本内容
  '#if'?: boolean | (() => boolean)      // 条件渲染
  '#show'?: boolean | (() => boolean)    // 显示/隐藏
  '#style'?: Record<string, any>         // 样式
  '#class'?: string | string[]           // CSS类名
  '#events'?: Record<string, any>        // 事件处理器
  '#staticProps'?: Record<string, any>   // 静态属性
  [key: string]: any                     // 其他动态属性
}

interface IEficySchema {
  views: IViewData[]
  plugins?: IPlugin[]
  [key: string]: any
}
```

### Schema 示例

#### 基础示例
```typescript
const schema = {
  views: [
    {
      '#': 'welcome',
      '#view': 'div',
      className: 'welcome-container',
      '#children': [
        {
          '#': 'title',
          '#view': 'h1',
          '#content': 'Hello Eficy V3!',
          style: { color: 'blue' }
        },
        {
          '#': 'button',
          '#view': 'button',
          '#content': 'Click Me',
          onClick: () => console.log('Clicked!')
        }
      ]
    }
  ]
}
```

#### 条件渲染示例
```typescript
const conditionalSchema = {
  views: [
    {
      '#': 'greeting',
      '#view': 'div',
      '#if': () => new Date().getHours() < 12,
      '#content': '早上好！'
    },
    {
      '#': 'afternoon-greeting',
      '#view': 'div',
      '#if': () => new Date().getHours() >= 12,
      '#content': '下午好！'
    }
  ]
}
```

#### 表单示例
```typescript
const formSchema = {
  views: [
    {
      '#': 'user-form',
      '#view': 'Form',
      layout: 'vertical',
      '#children': [
        {
          '#': 'name-field',
          '#view': 'Form.Item',
          label: '姓名',
          '#children': [
            {
              '#': 'name-input',
              '#view': 'Input',
              placeholder: '请输入姓名'
            }
          ]
        },
        {
          '#': 'submit-field',
          '#view': 'Form.Item',
          '#children': [
            {
              '#': 'submit-btn',
              '#view': 'Button',
              type: 'primary',
              htmlType: 'submit',
              '#content': '提交'
            }
          ]
        }
      ]
    }
  ]
}
```

## API 使用指南

### 1. 创建实例
```typescript
import { Eficy } from '@eficy/core'

const eficy = new Eficy()
```

### 2. 配置组件库
```typescript
import { Button, Input, Form } from 'antd'

eficy.config({
  componentMap: {
    Button,
    Input,
    Form,
    'Form.Item': Form.Item
  }
})
```

### 3. 扩展配置
```typescript
// 基础配置
eficy.config({
  componentMap: { Button, Input }
})

// 扩展配置（递归合并）
eficy.extend({
  componentMap: { Form, Select }
})
```

### 4. 渲染组件
```typescript
// 创建 React 元素（异步）
const element = await eficy.createElement(schema)

// 直接渲染到 DOM（异步）
await eficy.render(schema, '#root')
// 或
await eficy.render(schema, document.getElementById('root'))

// 获取节点树
const nodeTree = eficy.getNodeTree(schema)

// 查找和操作节点
const node = eficy.findNode('nodeId')
eficy.updateNode('nodeId', { text: 'Updated' })
eficy.addChild('parentId', { '#view': 'span', '#content': 'New child' })
eficy.removeChild('parentId', 'childId')
```

## 响应式数据

### 使用 EficyNode 构建响应式数据
```typescript
import { EficyNode } from '@eficy/core'

// 创建响应式视图节点
const eficyNode = new EficyNode({
  '#': 'counter',
  '#view': 'div',
  count: 0,
  '#style': { padding: '10px' },
  '#class': 'counter-container'
})

// 响应式更新
eficyNode.updateField('count', 10)
eficyNode.updateField('#content', 'Count: 10')
eficyNode.updateField('#style', { padding: '20px', color: 'blue' })

// 添加子节点
const child = new EficyNode({
  '#': 'display',
  '#view': 'span',
  '#content': 'Count: 10'
})
eficyNode.addChild(child)

// 条件渲染
eficyNode.updateField('#if', () => eficyNode.props.count > 0)
eficyNode.updateField('#show', true)

// 序列化
const json = eficyNode.toJSON()
console.log(json)
```

### 计算属性和动作
```typescript
import { Observable, Computed, Action, ObservableClass } from '@eficy/reactive'

class CounterStore extends ObservableClass {
  @Observable count = 0
  
  @Computed get isEven() {
    return this.count % 2 === 0
  }
  
  @Action increment() {
    this.count++
  }
  
  @Action reset() {
    this.count = 0
  }
}
```

## 组件注册

### 自动注册的 HTML 标签
```typescript
// 以下标签自动注册，无需手动配置
const htmlTags = [
  'div', 'span', 'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6',
  'button', 'input', 'textarea', 'select', 'option',
  'ul', 'ol', 'li', 'dl', 'dt', 'dd',
  'table', 'thead', 'tbody', 'tr', 'th', 'td',
  'form', 'label', 'fieldset', 'legend',
  'a', 'img', 'video', 'audio', 'canvas',
  'section', 'article', 'aside', 'header', 'footer', 'nav', 'main',
  'strong', 'em', 'small', 'code', 'pre', 'blockquote',
  'hr', 'br'
]

// 特殊组件
// Fragment 和 <> 也自动注册
```

### 注册自定义组件
```typescript
import { MyCustomComponent } from './components'

// 单个注册
eficy.config({
  componentMap: {
    'MyCustom': MyCustomComponent
  }
})

// 批量注册
const componentMap = {
  'Header': HeaderComponent,
  'Footer': FooterComponent,
  'Navigation': NavigationComponent
}
eficy.extend({ componentMap })
```

## 插件系统

### 生命周期插件接口
```typescript
interface ILifecyclePlugin extends IEficyPlugin {
  name: string
  version: string
  dependencies?: string[]
  enforce?: 'pre' | 'post' | undefined  // 执行顺序
  
  // 生命周期钩子
  onInit?(context: IInitContext, next: () => Promise<void>): Promise<void>
  onBuildSchemaNode?(viewData: IViewData, context: IBuildSchemaNodeContext, next: () => Promise<EficyNode>): Promise<EficyNode>
  onRender?(viewNode: EficyNode, context: IRenderContext, next: () => Promise<ReactElement>): Promise<ReactElement>
  onMount?(element: Element, viewNode: EficyNode, context: IMountContext, next: () => Promise<void>): Promise<void>
  onUnmount?(element: Element, viewNode: EficyNode, context: IUnmountContext, next: () => Promise<void>): Promise<void>
  onResolveComponent?(componentName: string, viewNode: EficyNode, context: IResolveComponentContext, next: () => Promise<ComponentType>): Promise<ComponentType>
  onProcessProps?(props: Record<string, any>, viewNode: EficyNode, context: IProcessPropsContext, next: () => Promise<Record<string, any>>): Promise<Record<string, any>>
  onHandleEvent?(event: Event, viewNode: EficyNode, context: IHandleEventContext, next: () => Promise<any>): Promise<any>
  onBindEvent?(eventName: string, handler: Function, viewNode: EficyNode, context: IBindEventContext, next: () => Promise<void>): Promise<void>
  onError?(error: Error, viewNode: EficyNode | null, context: IErrorContext, next: () => Promise<ReactElement | void>): Promise<ReactElement | void>
}
```

### 插件示例
```typescript
class MyPlugin implements ILifecyclePlugin {
  name = 'MyPlugin'
  version = '1.0.0'
  enforce = 'pre' // 优先执行
  
  async onInit(context: IInitContext, next: () => Promise<void>) {
    console.log('Plugin initializing...')
    await next()
    console.log('Plugin initialized')
  }
  
  async onBuildSchemaNode(
    viewData: IViewData, 
    context: IBuildSchemaNodeContext, 
    next: () => Promise<EficyNode>
  ): Promise<EficyNode> {
    // 修改或验证 ViewData
    console.log('Building node:', viewData['#view'])
    const node = await next()
    // 后处理节点
    return node
  }
  
  async onProcessProps(
    props: Record<string, any>,
    viewNode: EficyNode,
    context: IProcessPropsContext,
    next: () => Promise<Record<string, any>>
  ): Promise<Record<string, any>> {
    // 处理属性
    const processedProps = await next()
    return {
      ...processedProps,
      'data-plugin': 'MyPlugin'
    }
  }
}
```

### 注册插件
```typescript
const eficy = new Eficy()
const plugin = new MyPlugin()

// 注册插件
eficy.registerPlugin(plugin)

// 卸载插件
eficy.unregisterPlugin('MyPlugin')

// 获取插件管理器
const pluginManager = eficy.getPluginManager()
console.log(pluginManager.getHookStats())
```

## 性能优化

### 1. React.memo 优化
- 每个 ViewNode 渲染为独立的 RenderNode
- 使用 React.memo 防止不必要的重渲染
- 比较策略基于 ViewNode 实例引用

### 2. 响应式更新
- 细粒度的响应式更新
- 只有依赖的 ViewNode 变更时才重新渲染
- 批处理多个更新操作

### 3. 组件隔离
- ErrorBoundary 包装确保错误隔离
- 独立的组件生命周期管理

## 测试

### 单元测试示例
```typescript
import { describe, it, expect } from 'vitest'
import { EficyNode, Eficy } from '@eficy/core'

describe('EficyNode', () => {
  it('should create reactive eficy node', () => {
    const eficyNode = new EficyNode({
      '#': 'test',
      '#view': 'div',
      className: 'test-class'
    })
    
    expect(eficyNode['#']).toBe('test')
    expect(eficyNode['#view']).toBe('div')
    expect(eficyNode.props.className).toBe('test-class')
  })
  
  it('should update field reactively', () => {
    const eficyNode = new EficyNode({
      '#': 'test',
      '#view': 'div'
    })
    
    eficyNode.updateField('title', 'New Title')
    expect(eficyNode.props.title).toBe('New Title')
  })
  
  it('should handle conditional rendering', () => {
    const eficyNode = new EficyNode({
      '#': 'test',
      '#view': 'div',
      '#if': () => false
    })
    
    expect(eficyNode.shouldRender).toBe(false)
    
    eficyNode.updateField('#if', true)
    expect(eficyNode.shouldRender).toBe(true)
  })
  
  it('should serialize to JSON', () => {
    const eficyNode = new EficyNode({
      '#': 'test',
      '#view': 'Button',
      type: 'primary',
      '#content': 'Click me'
    })
    
    const json = eficyNode.toJSON()
    expect(json).toEqual({
      '#': 'test',
      '#view': 'Button',
      type: 'primary',
      '#content': 'Click me'
    })
  })
})
```

### 集成测试示例
```typescript
import { render, screen } from '@testing-library/react'
import { Eficy } from '@eficy/core'

describe('Eficy Integration', () => {
  it('should render schema correctly', async () => {
    const eficy = new Eficy()
    const schema = {
      views: [
        {
          '#': 'greeting',
          '#view': 'h1',
          '#content': 'Hello World'
        }
      ]
    }
    
    const element = await eficy.createElement(schema)
    render(element)
    
    expect(screen.getByRole('heading')).toHaveTextContent('Hello World')
  })
  
  it('should handle node updates', async () => {
    const eficy = new Eficy()
    const schema = {
      views: [
        {
          '#': 'counter',
          '#view': 'div',
          '#content': 'Count: 0'
        }
      ]
    }
    
    await eficy.createElement(schema)
    
    // 更新节点
    eficy.updateNode('counter', { '#content': 'Count: 1' })
    
    const node = eficy.findNode('counter')
    expect(node?.props.children).toBe('Count: 1')
  })
})
```

## 错误处理

### ErrorBoundary
- 每个 RenderNode 都包含 ErrorBoundary
- 捕获组件渲染错误，防止整个应用崩溃
- 提供错误信息和恢复机制

### 常见错误和解决方案

#### 1. 组件未找到
```typescript
// 错误：Component "MyButton" not found in componentMap
// 解决：注册组件
eficy.config({
  componentMap: {
    'MyButton': MyButtonComponent
  }
})
```

#### 2. 模块导入错误
```typescript
// 错误：Cannot find module '@eficy/core'
// 解决：确保正确安装依赖
npm install @eficy/core @eficy/reactive @eficy/reactive-react
```

#### 3. 类型错误
```typescript
// 错误：Type 'string' is not assignable to type 'ReactElement'
// 解决：检查 Schema 中的 '#content' 类型
{
  '#content': 'Text content' // ✅ 正确
  // '#content': <Component /> // ✅ 也正确
}
```

#### 4. 异步方法调用错误
```typescript
// 错误：未等待异步方法
const element = eficy.createElement(schema) // ❌ 错误

// 正确：使用 await
const element = await eficy.createElement(schema) // ✅ 正确
```

#### 5. 依赖注入错误
```typescript
// 错误：reflect-metadata 未导入
// 解决：在入口文件顶部导入
import 'reflect-metadata'
```

## 迁移指南

### 从 V2 迁移到 V3

#### 1. 依赖更新
```json
// package.json
{
  "dependencies": {
    "@eficy/core": "^3.0.0",
    "@eficy/reactive": "^1.0.0",
    "@eficy/reactive-react": "^1.0.0",
    "tsyringe": "^4.8.0",
    "reflect-metadata": "^0.2.2"
  }
}
```

#### 2. 导入更新
```typescript
// V2
import { Controller } from '@eficy/core-v2'

// V3
import { Eficy } from '@eficy/core'
```

#### 3. 实例化更新
```typescript
// V2
const controller = new Controller(schema)

// V3
const eficy = new Eficy()
const element = eficy.createElement(schema)
```

#### 4. 响应式数据更新
```typescript
// V2 (MobX)
import { Observable, Computed, Action } from 'mobx'

// V3 (@eficy/reactive)
import { Observable, Computed, Action, ObservableClass } from '@eficy/reactive'

class Store extends ObservableClass {
  @Observable data = []
  
  @Action updateData(newData) {
    // V2: 直接修改
    this.data.push(newData)
    
    // V3: 不可变更新（推荐）
    this.data = [...this.data, newData]
  }
}
```

#### 5. API 方法更新
```typescript
// V2
const controller = new Controller(schema)
const element = controller.createElement() // 同步

// V3
const eficy = new Eficy()
const element = await eficy.createElement(schema) // 异步
```

#### 6. 节点模型更新
```typescript
// V2: ViewNode
import { ViewNode } from '@eficy/core-v2'

// V3: EficyNode
import { EficyNode } from '@eficy/core'

// V2
const viewNode = new ViewNode(data)

// V3
const eficyNode = new EficyNode(data)
```

## 最佳实践

### 1. Schema 设计
- 使用有意义的节点 ID (`'#'` 字段)
- 保持 Schema 结构清晰和层次化
- 合理使用条件渲染避免复杂嵌套

### 2. 组件注册
- 统一的组件命名约定
- 按功能模块组织组件
- 使用 TypeScript 类型定义

### 3. 性能优化
- 避免在 `'#if'` 中进行复杂计算
- 使用计算属性缓存昂贵操作
- 合理拆分大型 Schema

### 4. 错误处理
- 总是提供 fallback 组件
- 使用 TypeScript 严格模式
- 添加适当的错误边界

## 开发工具

### 调试
- React DevTools 查看组件树
- 浏览器控制台查看 ViewNode 状态
- 使用 `effect` 跟踪响应式变化

### 性能分析
- React Profiler 分析渲染性能
- 观察 ViewNode 更新频率
- 检查不必要的重新渲染

## 示例项目

### Playground
```bash
cd playground
npm run dev:v3
# 访问 http://localhost:9899
```

### 完整应用示例
参考 `playground/src/main-v3.tsx` 查看完整的应用示例，包含：
- 基础组件使用
- 响应式数据演示
- 表单处理
- 条件渲染
- 组件库集成

---

此文档为 Eficy Core V3 的完整 LLM 参考文档，涵盖了架构、API、使用方法、最佳实践等所有重要信息。 